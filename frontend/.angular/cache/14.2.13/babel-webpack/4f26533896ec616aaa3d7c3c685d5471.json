{"ast":null,"code":"import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () {\n  return {\n    enterDuration: 150\n  };\n};\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false\n  })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n  constructor(/** The source MatSlideToggle of the event. */\n  source, /** The new `checked` value of the MatSlideToggle. */\n  checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n    this._onChange = _ => {};\n    this._onTouched = () => {};\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /** Name value will be applied to the input element if present. */\n    this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    this.id = this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n    this.toggleChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /** Whether the slide-toggle is required. */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Whether the slide-toggle element is checked or not. */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Returns the unique id for the visual hidden input. */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      // Only forward focus manually when it was received programmatically or through the\n      // keyboard. We should not do this for mouse/touch focus for two reasons:\n      // 1. It can prevent clicks from landing in Chrome (see #18269).\n      // 2. They're already handled by the wrapping `label` element.\n      if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n        this._inputElement.nativeElement.focus();\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the slide-toggle. */\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\nMatSlideToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 18,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd()()();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      const _r4 = ɵngcc0.ɵɵreference(12);\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/function () {\n  let ɵMatSlideToggleRequiredValidator_BaseFactory;\n  return function MatSlideToggleRequiredValidator_Factory(t) {\n    return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator);\n  };\n}();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, {\n    declarations: [MatSlideToggleRequiredValidator],\n    exports: [MatSlideToggleRequiredValidator]\n  });\n})();\nclass MatSlideToggleModule {}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function () {\n      return [MatSlideToggle];\n    },\n    imports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"names":["ObserversModule","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Attribute","Inject","Optional","ViewChild","Input","Output","Directive","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","origin","focusVia","toggle","_onLabelTextChange","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","MatSlideToggle_Template_input_click_4_listener","ɵɵelementEnd","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","toString","ɵɵpureFunction0","dependencies","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","ɵMatSlideToggleRequiredValidator_BaseFactory","MatSlideToggleRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatSlideToggleModule","MatSlideToggleModule_Factory","imports"],"sources":["C:/Users/intern-prodoc3/Desktop/Otsuka Young Star/Bootcamp/cafe-management-system/frontend/node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                }, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}