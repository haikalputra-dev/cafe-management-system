{"ast":null,"code":"import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r1.action());\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) {}\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    this.duration = 0;\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction() {\n    return this._onAction;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n  get hasAction() {\n    return !!this.data.action;\n  }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n    this._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n      this._applySnackBarClasses();\n      return this._portalOutlet.attachDomPortal(portal);\n    };\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n    // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n    clearTimeout(this._announceTimeoutId);\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  _applySnackBarClasses() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /** Asserts that no content is already attached to the container. */\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(2, \"div\");\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    }\n  },\n  dependencies: [ɵngcc4.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Platform\n}, {\n  type: MatSnackBarConfig\n}];\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\nMatSnackBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function () {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    this._snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message, action = '', config) {\n    const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {\n      message,\n      action\n    };\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  _attach(content, userConfig) {\n    const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal);\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n    });\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\nMatSnackBar.ɵprov = ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc5.Overlay\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc7.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","ɵɵdefineInjectable","ɵɵinject","INJECTOR","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","LiveAnnouncer","Breakpoints","BreakpointObserver","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","SimpleSnackBar_div_2_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","SimpleSnackBar_div_2_Template_button_click_1_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","action","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵtextInterpolate","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","hasAction","ɵfac","SimpleSnackBar_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","ɵɵtemplate","message","ɵɵproperty","dependencies","NgIf","MatButton","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","None","OnPush","host","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","ɵɵsyntheticHostListener","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","ɵɵsyntheticHostProperty","features","ɵɵInheritDefinitionFeature","MatSnackBarContainer_Template","ɵɵelement","ɵɵattribute","animation","propDecorators","static","Default","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory","ɵprov","token"],"sources":["C:/Users/intern-prodoc3/Desktop/Otsuka Young Star/Bootcamp/cafe-management-system/frontend/node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js"],"sourcesContent":["import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/portal';\nimport * as ɵngcc5 from '@angular/cdk/overlay';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1)(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.action()); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, dependencies: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{ selector: 'simple-snack-bar', template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'class': 'mat-simple-snackbar'\n                }, styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\n    } }, dependencies: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{ selector: 'snack-bar-container', template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                }, styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}