{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n  constructor(/** Reference to the chip that emitted the event. */\n  source, /** Whether the chip that emitted the event is selected. */\n  selected, /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\nMatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n  constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n    this._chipListDisabled = false;\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n    this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = _document.createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  get removable() {\n    return this._removable;\n  }\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._changeDetectorRef.markForCheck();\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /** Handle custom key presses. */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\nMatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MAT_CHIP_AVATAR]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_TRAILING_ICON]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_REMOVE]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nMatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n  constructor(/** Chip list that emitted the event. */\n  source, /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, /** @docs-private */\n  ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n    this._uid = `mat-chip-list-${nextUniqueId++}`;\n    /** Tab index for the chip list. */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /** Function when touched */\n    this._onTouched = () => {};\n    /** Function when changed */\n    this._onChange = () => {};\n    this._multiple = false;\n    this._compareWith = (o1, o2) => o1 === o2;\n    this._required = false;\n    this._disabled = false;\n    /** Orientation of the chip list. */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /** The array of selected chips inside chip list. */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n    // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options) {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event) {\n    const target = event.target;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  _isInputEmpty(element) {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element;\n      return !input.value;\n    }\n    return false;\n  }\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\nMatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n    this.placeholder = '';\n    /** Unique id for the input. */\n    this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n    this._disabled = false;\n    this._inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n  get empty() {\n    return !this._inputElement.value;\n  }\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n    this._emitChipEnd(event);\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this._inputElement,\n        value: this._inputElement.value\n      });\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this._inputElement.focus(options);\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\nMatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\nMatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: ɵ0\n  }],\n  imports: [MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","ctorParameters","decorators","String","propDecorators","MatChipRemove","_parentChip","elementRef","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","input","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","descendants","None","OnPush","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","chipList","_chipList","addOnBlur","ngOnChanges","_emitChipEnd","_focus","_isSeparatorKey","_onInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","MatChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/intern-prodoc3/Desktop/Otsuka Young Star/Bootcamp/cafe-management-system/frontend/node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            let input = element;\n            return !input.value;\n        }\n        return false;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this._inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}