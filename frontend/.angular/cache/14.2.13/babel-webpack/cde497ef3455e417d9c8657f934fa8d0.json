{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, /** @breaking-change 11.0.0 _document argument to become required. */\n  _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    /** The default delay in ms before showing the tooltip after show is called */\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n    this._handleKeydown = event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._ngZone.run(() => this.hide(0));\n      }\n    };\n    this._scrollStrategy = scrollStrategy;\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition();\n        if (this._tooltipInstance) {\n          this._tooltipInstance.show(0);\n        }\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The message to be displayed in the tooltip */\n  get message() {\n    return this._message;\n  }\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition();\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n  _updatePosition() {\n    const position = this._overlayRef.getConfig().positionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    }\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n    this._addListeners(this._passiveListeners);\n  }\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n      const doc = this._document || document;\n      const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      }\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    this._onHide = new Subject();\n    /** Stream that emits whether the user has a handset-sized display.  */\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n  _animationDone(event) {\n    const toState = event.toState;\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      let tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        '(body:auxclick)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Optional","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","runOutsideAngular","nativeElement","addEventListener","value","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","disabled","_setupPointerEnterEventsIfNeeded","message","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","pipe","subscribe","origin","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","doc","document","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","MatTooltip_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","exportAs","ctorParameters","undefined","decorators","args","propDecorators","ɵsetClassMetadata","selector","host","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵlistener","TooltipComponent_click_HostBindingHandler","ɵɵresolveBody","TooltipComponent_auxclick_HostBindingHandler","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","$event","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/intern-prodoc3/Desktop/Otsuka Young Star/Bootcamp/cafe-management-system/frontend/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /** @breaking-change 11.0.0 _document argument to become required. */\n    _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    this._tooltipInstance.show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        const position = this._overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n            const doc = this._document || document;\n            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component', template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                }, styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule, MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}